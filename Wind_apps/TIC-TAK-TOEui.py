# Form implementation generated from reading ui file 'TIC-TAK-TOEui.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(542, 558)
        Form.setStyleSheet("background-color: rgb(209, 209, 209);")
        self.btn_1_1 = QtWidgets.QPushButton(Form)
        self.btn_1_1.setGeometry(QtCore.QRect(30, 20, 141, 121))
        font = QtGui.QFont()
        font.setPointSize(100)
        font.setBold(True)
        font.setWeight(75)
        self.btn_1_1.setFont(font)
        self.btn_1_1.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_1_1.setText("")
        self.btn_1_1.setObjectName("btn_1_1")
        self.btn_1_2 = QtWidgets.QPushButton(Form)
        self.btn_1_2.setGeometry(QtCore.QRect(200, 20, 141, 121))
        font = QtGui.QFont()
        font.setPointSize(100)
        font.setBold(True)
        font.setWeight(75)
        self.btn_1_2.setFont(font)
        self.btn_1_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_1_2.setText("")
        self.btn_1_2.setObjectName("btn_1_2")
        self.btn_1_3 = QtWidgets.QPushButton(Form)
        self.btn_1_3.setGeometry(QtCore.QRect(380, 20, 141, 121))
        font = QtGui.QFont()
        font.setPointSize(100)
        font.setBold(True)
        font.setWeight(75)
        self.btn_1_3.setFont(font)
        self.btn_1_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_1_3.setText("")
        self.btn_1_3.setObjectName("btn_1_3")
        self.btn_2_3 = QtWidgets.QPushButton(Form)
        self.btn_2_3.setGeometry(QtCore.QRect(380, 180, 141, 121))
        font = QtGui.QFont()
        font.setPointSize(100)
        font.setBold(True)
        font.setWeight(75)
        self.btn_2_3.setFont(font)
        self.btn_2_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_2_3.setText("")
        self.btn_2_3.setObjectName("btn_2_3")
        self.btn_2_2 = QtWidgets.QPushButton(Form)
        self.btn_2_2.setGeometry(QtCore.QRect(200, 180, 141, 121))
        font = QtGui.QFont()
        font.setPointSize(100)
        font.setBold(True)
        font.setWeight(75)
        self.btn_2_2.setFont(font)
        self.btn_2_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_2_2.setText("")
        self.btn_2_2.setObjectName("btn_2_2")
        self.btn_2_1 = QtWidgets.QPushButton(Form)
        self.btn_2_1.setGeometry(QtCore.QRect(30, 180, 141, 121))
        font = QtGui.QFont()
        font.setPointSize(100)
        font.setBold(True)
        font.setWeight(75)
        self.btn_2_1.setFont(font)
        self.btn_2_1.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_2_1.setText("")
        self.btn_2_1.setObjectName("btn_2_1")
        self.btn_3_1 = QtWidgets.QPushButton(Form)
        self.btn_3_1.setGeometry(QtCore.QRect(30, 340, 141, 121))
        font = QtGui.QFont()
        font.setPointSize(100)
        font.setBold(True)
        font.setWeight(75)
        self.btn_3_1.setFont(font)
        self.btn_3_1.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_3_1.setText("")
        self.btn_3_1.setObjectName("btn_3_1")
        self.btn_3_2 = QtWidgets.QPushButton(Form)
        self.btn_3_2.setGeometry(QtCore.QRect(200, 340, 141, 121))
        font = QtGui.QFont()
        font.setPointSize(100)
        font.setBold(True)
        font.setWeight(75)
        self.btn_3_2.setFont(font)
        self.btn_3_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_3_2.setText("")
        self.btn_3_2.setObjectName("btn_3_2")
        self.btn_3_3 = QtWidgets.QPushButton(Form)
        self.btn_3_3.setGeometry(QtCore.QRect(380, 340, 141, 121))
        font = QtGui.QFont()
        font.setPointSize(100)
        font.setBold(True)
        font.setWeight(75)
        self.btn_3_3.setFont(font)
        self.btn_3_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_3_3.setText("")
        self.btn_3_3.setObjectName("btn_3_3")
        self.btn_resstart = QtWidgets.QPushButton(Form)
        self.btn_resstart.setGeometry(QtCore.QRect(100, 490, 321, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.btn_resstart.setFont(font)
        self.btn_resstart.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.btn_resstart.setObjectName("btn_resstart")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        # my code
        self.func()
        self.field = [['', '', ''],
                      ['', '', ''],
                      ['', '', '']]

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.btn_resstart.setText(_translate("Form", "New Game"))

    def func(self):
        self.btn_1_1.clicked.connect(lambda: self.choose_turn(1, 1))
        self.btn_1_2.clicked.connect(lambda: self.choose_turn(1, 2))
        self.btn_1_3.clicked.connect(lambda: self.choose_turn(1, 3))
        self.btn_2_1.clicked.connect(lambda: self.choose_turn(2, 1))
        self.btn_2_2.clicked.connect(lambda: self.choose_turn(2, 2))
        self.btn_2_3.clicked.connect(lambda: self.choose_turn(2, 3))
        self.btn_3_1.clicked.connect(lambda: self.choose_turn(3, 1))
        self.btn_3_2.clicked.connect(lambda: self.choose_turn(3, 2))
        self.btn_3_3.clicked.connect(lambda: self.choose_turn(3, 3))

        self.btn_resstart.clicked.connect(lambda: self.new_game())

    def push_btn(self, i, j, line):
        if i == 1:
            if j == 1:
                self.btn_1_1.setText(line)
                self.field[i][j] = line
            elif j == 2:
                self.btn_1_2.setText(line)
                self.field[i][j] = line
            elif j == 3:
                self.btn_1_3.setText(line)
                self.field[i][j] = line

        elif i == 2:
            if j == 1:
                self.btn_2_1.setText(line)
                self.field[i][j] = line
            elif j == 2:
                self.btn_2_2.setText(line)
                self.field[i][j] = line
            elif j == 3:
                self.btn_2_3.setText(line)
                self.field[i][j] = line

        elif i == 3:
            if j == 1:
                self.btn_3_1.setText(line)
                self.field[i][j] = line
            elif j == 2:
                self.btn_3_2.setText(line)
                self.field[i][j] = line
            elif j == 3:
                self.btn_3_3.setText(line)
                self.field[i][j] = line

    def choose_turn(self, i, j):
        line = 'X'
        self.push_btn(i, j, line)
        self.variants_of_turn(self.field)

    def variants_of_turn(self, arr):
        win = False
        i_win, j_win = None, None

        for i in range(3):
            for j in range(3):
                if arr[i][j] != '':
                    continue
                else:
                    if self.win_condition(i, j, self.field):
                        win = True
                        i_win = i
                        j_win = j
        if win:
            line = 'O'
            self.push_btn(i_win, j_win, line)
            return
        else:
            self.def_condition(self.field)

    def win_condition(self, i, j, arr):
        if arr[i][j - 1] == arr[i][(j + 1) % 3] == 'O':
            return True
        elif arr[i][(j + 1) % 3] == arr[i][j - 1] == 'O':
            return True
        elif arr[i - 1][j] == arr[(i + 1) % 3][j] == 'O':
            return True
        elif arr[(i + 1) % 3][j] == arr[i - 1][j] == 'O':
            return True
        elif arr[i - 1][j - 1] == arr[(i + 1) % 3][(j + 1) % 3] == 'O':
            return True
        elif arr[i - 1][(j + 1) % 3] == arr[(i + 1) % 3][j - 1] == 'O':
            return True

        return False

    def def_condition(self, arr):
        line = 'O'
        for i in range(3):
            for j in range(3):
                if arr[i][j] == '':
                    continue
                else:
                    if i == 1 and j == 1:
                        # central point
                        if arr[i][j] == arr[i - 1][j - 1] == 'X' and arr[i + 1][j + 1] != 'O':
                            self.push_btn(i + 1 + 1, j + 1 + 1, line)
                            self.field[i + 1][j + 1] = line
                            return
                        elif arr[i][j] == arr[i - 1][j + 1] == 'X' and arr[i + 1][j - 1] != 'O':
                            self.push_btn(i + 1 + 1, j - 1 + 1, line)
                            self.field[i + 1][j - 1] = line
                            return
                        elif arr[i][j] == arr[i + 1][j - 1] == 'X' and arr[i - 1][j + 1] != 'O':
                            self.push_btn(i - 1 + 1, j + 1 + 1, line)
                            self.field[i - 1][j + 1] = line
                            return
                        elif arr[i][j] == arr[i + 1][j + 1] == 'X' and arr[i - 1][j - 1] != 'O':
                            self.push_btn(i - 1 + 1, j - 1 + 1, line)
                            self.field[i - 1][j - 1] = line
                            return
                        elif arr[i][j] == arr[i][j + 1] == 'X' and arr[i][j - 1] != 'O':
                            self.push_btn(i + 1, j - 1 + 1, line)
                            self.field[i][j - 1] = line
                            return
                        elif arr[i][j] == arr[i][j - 1] == 'X' and arr[i][j + 1] != 'O':
                            self.push_btn(i + 1, j + 1 + 1, line)
                            self.field[i][j + 1] = line
                            return
                        elif arr[i][j] == arr[i + 1][j] == 'X' and arr[i - 1][j] != 'O':
                            self.push_btn(i - 1 + 1, j + 1, line)
                            self.field[i - 1][j] = line
                            return
                        elif arr[i][j] == arr[i - 1][j] == 'X' and arr[i + 1][j] != 'O':
                            self.push_btn(i + 1 + 1, j + 1, line)
                            self.field[i + 1][j] = line
                            return

                    else:
                        # other points
                        if arr[i][j] == arr[i][(j + 1) % 3] == 'X' and arr[i][(j + 2) % 3] != 'O':
                            self.push_btn(i + 1, (j + 2) % 3 + 1, line)
                            self.field[i][(j + 2) % 3] = line
                            return
                        elif arr[i][j] == arr[i][j - 1] == 'X' and arr[i][j - 2] != 'O':
                            self.push_btn(i + 1, abs(j - 2), line)
                            self.field[i][j - 2] = line
                            return
                        elif arr[i][j] == arr[(i + 1) % 3][j] == 'X' and arr[(i + 2) % 3][j] != 'O':
                            self.push_btn((i + 2) % 3 + 1, j + 1, line)
                            self.field[(i + 2) % 3][j] = line
                            return
                        elif arr[i][j] == arr[i - 1][j] == 'X' and arr[i - 2][j] != 'O':
                            self.push_btn(abs(i - 2), j + 1, line)
                            self.field[i - 2][j] = line
                            return

        a, b = randint(0, 2), randint(0, 2)
        if arr[a][b] == 'X':
            while arr[a][b] != '':
                a, b = randint(0, 2), randint(0, 2)
        self.push_btn(a + 1, b + 1, line)
        self.field[a][b] = line
        return

    def new_game(self):
        pass


if __name__ == "__main__":
    import sys
    from random import randint

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec())
